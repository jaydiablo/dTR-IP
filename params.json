{"name":"dTR-IP","tagline":"An IPv4/v6 Helper Suite for PHP","body":"#dTR-IP\r\n===============\r\n\r\nThere are many PHP shortfalls when it comes to IPv6. Contrary to popular belief, `inet_pton()` is not a solve all and is very limited in it's abilities alone.\r\n\r\n#Usage:\r\n\r\nThis class takes both IPv6 (expanded and condensed) and IPv4 addresses into consideration.\r\n\r\nYou can create the class by passing an IP and CIDR mask one of two ways:\r\n\r\n    $net = new dTRIP(\"fe80:dead:15:a:bad:1dea:11:2234/93\");\r\n    // or\r\n    $net = new dTRIP(\"fe80:dead:15:a:bad:1dea:11:2234\", 93);\r\n\r\nYou can then access different aspects of a network:\r\n\r\n    $net->getIP(); // returns IP\r\n    $net->getCIDR(); // returns CIDR\r\n    $net->getNetwork() // return Network ID\r\n    $net->getBroadcast() // return Broadcast ID\r\n    \r\nThere is a `__toString()` method which will return a JSON-encoded string on the class object:\r\n\r\n    echo new dTRIP(\"fe80:dead:15:a:bad:1dea::/65\");\r\n    \r\nThe above would return:\r\n\r\n    {\r\n      \"ip\":\"fe80:dead:15:a:bad:1dea::\",\r\n      \"cidr\":\"65\",\r\n      \"netmask\":\"ffff:ffff:ffff:ffff:8000::\",\r\n      \"network\":\"fe80:dead:15:a::\",\r\n      \"broadcast\":\"fe80:dead:15:a:7fff:ffff:ffff:ffff\"\r\n    }\r\n\r\n# Examples:\r\n\r\nHere are some examples:\r\n\r\n###ipv4\r\n\r\n    $net = new dTRIP(\"10.22.99.199\", 28);\r\n    echo $net->getNetwork(); // 10.22.99.192\r\n\r\n###ipv6\r\n\r\n    $net = new dTRIP(\"fe80:dead:15:a:bad:1dea:11:2234\", 93);\r\n    $net->getNetwork(); // fe80:dead:15:a:bad:1de8::\r\n    $net->getBroadcast(); // fe80:dead:15:a:bad:1def:ffff:ffff\r\n    \r\n#Notes:\r\n\r\nAlthough IPv6 does not use the concept of networks and broadcasts, the ranges are still needed to do inclusive searches. Also, IPv6 has a subnet segment, but can still be supernetted/subnetted, which this takes into consideration.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}